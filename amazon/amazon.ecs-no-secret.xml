<?xml version="1.0" encoding="UTF-8"?>
	<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
	<meta>
		<author>Dirceu Pauka JÃºnior</author>
		<documentationURL>http://docs.amazonwebservices.com/AWSECommerceService/2009-01-06/GSG/</documentationURL>
	</meta>
	<execute><![CDATA[
	function getSignedURL(unsignedUrl, accessKey, secretKey) {
		var lines = unsignedUrl.split("\n");
		unsignedUrl = "";
		for (var i in lines) { unsignedUrl += lines[i]; }

		// find host and query portions
		var urlregex = new RegExp("^http:\\/\\/(.*)\\/onca\\/xml\\?(.*)$");
		var matches = urlregex.exec(unsignedUrl);

		var host = matches[1].toLowerCase();
		var query = matches[2];

		// split the query into its constituent parts
		var pairs = query.split("&");

		// encode the name and value in each pair
		pairs.push("Timestamp=" + getNowTimeStamp());
		pairs = encodeNameValuePairs(pairs);

		// sort them and put them back together to get the canonical query string
		pairs.sort();

		var canonicalQuery = pairs.join("&");
		var stringToSign = "GET\n" + host + "\n/onca/xml\n" + canonicalQuery;
		
		// calculate the signature
		var signature = (secretKey) ? sign(secretKey, stringToSign) : sign('1234567890', stringToSign);

		// assemble the signed url
		var signedUrl = "http://" + host + "/onca/xml?" + canonicalQuery + "&Signature=" + signature;
		y.log(signedUrl);
		return signedUrl;
	}

	function encodeNameValuePairs(pairs) {
		for (var i = 0; i < pairs.length; i++) {
			var name = "";
			var value = "";

			var pair = pairs[i];
			var index = pair.indexOf("=");
			
			name = pair.substring(0, index);
			if (index < pair.length - 1) {
				value = pair.substring(index + 1);
			}

			// decode and encode to make sure we undo any incorrect encoding
			name = encodeURIComponent(decodeURIComponent(name));

			value = value.replace(/\+/g, "%20");
			value = encodeURIComponent(decodeURIComponent(value));

			pairs[i] = name + "=" + value;
		}

		return pairs;
	}

	function sign(secret, message) {
		return y.crypto.encodeHmacSHA256(secret, message);
	}

	Date.prototype.toISODate =
	new Function("with (this)\n    return " +
	"getFullYear()+'-'+addZero(getMonth()+1)+'-'" +
	"+addZero(getDate())+'T'+addZero(getHours())+':'" +
	"+addZero(getMinutes())+':'+addZero(getSeconds())+'.000Z'");

	function addZero(n) {
		return ( n < 0 || n > 9 ? "" : "0" ) + n;
	}

	function getNowTimeStamp() {
		var time = new Date();
		var gmtTime = new Date(time.getTime() + (time.getTimezoneOffset() * 60000));
		return gmtTime.toISODate();
	}

	]]></execute>
	<bindings>
		<select itemPath="ItemSearchResponse.Items.Item" produces="XML">
		<urls>
			<url>http://ecs.amazonaws.com/onca/xml?Service=AWSECommerceService&amp;Version=2009-11-01</url>
		</urls>
		<inputs>
			<key id="Operation" type="xs:string" paramType="query" required="false" default="ItemSearch" />
			<key id="Title" type="xs:string" paramType="query" />
			<key id="Keywords" type="xs:string" paramType="query" />
			<key id="AWSAccessKeyId" type="xs:string" paramType="query" required="true" />
			<key id="SearchIndex" type="xs:string" paramType="query" default="All" />
			<key id="ResponseGroup" type="xs:string" paramType="query" />
			<key id="AssociateTag" type="xs:string" paramType="query" />
			<key id="Availability" type="xs:string" paramType="query" />			
			<key id="Sort" type="xs:string" paramType="query" />
			<key id="secret" type="xs:string" paramType="variable" />			
		</inputs>
		<execute><![CDATA[
		var signeduri = getSignedURL(request.url, AWSAccessKeyId, secret);
		response.object = y.rest(signeduri).get().response;
		]]></execute>
		</select>
	</bindings>
</table>