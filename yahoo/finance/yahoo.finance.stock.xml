<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <author>Tom Powers</author>
    <description>Yahoo Finance Stock Summary Information</description>
    <sampleQuery>select * from {table} where symbol="yhoo"</sampleQuery>
    <documentationURL>http://wiki.github.com/tpowers/yql-tables</documentationURL> 
  </meta>
  <bindings>
    <select itemPath="" produces="XML">
      <urls>
       <url></url>
      </urls>
      <inputs>
        <key id='symbol' type='xs:string' paramType='variable' required='true' />
      </inputs>
<execute><![CDATA[
    // pad string with leading char
    String.prototype.pad = function (padchar, padlen) {
	s = this
	while (s.length < padlen) {
	    s = padchar + s;
	}
	return s;
    }

    String.prototype.trim = function () {
	var	str = this.replace(/^\s\s*/, ''),
	        ws = /\s/,
	        i = str.length;
	while (ws.test(str.charAt(--i)));
	return str.slice(0, i + 1);
    }

    String.prototype.toInt = function () {
	//remove leading 0's because otherwise str can be interpreted as Octal
	var str = this.replace(/^0+/, '');
	return parseInt(str);
    }

    function getQuoteInfo() {
	// Get company name & market from Yahoo Quotes Summary page
	var results = quoteQuery.results;
	elements = results.*.length();
	if (elements == 0)
	    return false;

	stock.CompanyName = results.h1.text().toString().trim();
	var marketSymbolStr = results.div.span.toString();
	//var match = marketSymbolStr.match(/^[^:]+:\s+([^)]+)\)$/); matches stock symbol
	var match = marketSymbolStr.match(/^\(([^:]+):/);
	if (match != null) {
	    stock.CompanyName += <Market>{match[1]}</Market>;
	}
	return true;
    }

    function getHistoricalPrice() {
	// Get the Historical Price Range
	var results = historicalQuery.results;
	elements = results.*.length();
	if (elements < 6) {
	    y.log("not enough elements");
	    return false;
	}
	startMonth = String(results.option[0].@value.toString().toInt() + 1)
	    .pad("0", 2);
	startDay = results.input[0].@value.toString().pad("0", 2);
	startYear = results.input[1].@value.toString();
	endMonth = String(results.option[1].@value.toString().toInt() + 1)
	    .pad("0", 2);
	endDay = results.input[2].@value.toString().pad("0", 2);
	endYear = results.input[3].@value.toString();

	startDate = startYear + "-" + startMonth + "-" + startDay;
	endDate = endYear + "-" + endMonth + "-" + endDay;

	stock.appendChild(<StartDate>{startDate}</StartDate>);
	stock.appendChild(<EndDate>{endDate}</EndDate>);
	return true;
    }

    function getExecutive(executives, tr) {
	var executive = <Executive></Executive>;
	executive.node += <Name>{tr.td.strong.text()}</Name>;

	var m = tr.td.p[0].text().toString().match(/^,\s*(\d+)/);
	if (m) {
	    executive.node += <Age>{m[1]}</Age>;
	}

	var titles = tr.td.p[0].small.toString().split(/,\s*|\s+and\s+/i);
	for (var i=0; i<titles.length; i++)
	    executive.node += <Title>{titles[i]}</Title>;

	var pay = tr.td[1].p.text().toString().replace(/\s+/g, "");
	executive.node += <Pay>{pay}</Pay>

	var exercised = tr.td[2].p.text().toString().replace(/\s+/g, "");
	executive.node += <Exercised>{exercised}</Exercised>

	executives.node += executive;
    }

    function getAddressInfo(stock, td) {
	var companyName = td.strong.text().toString().trim();
	//stock.node += <Name>{companyName}</Name>;
	
	var mapref = td.p.a[0].@href;
	var m = mapref.match(/addr=([^&]+)&csz=([^&]+)&country=(.*)$/i);
	if (m) {
	    var address = m[1].replace(/%20/g, " ");
	    var country = m[3].replace(/%20/g, " ");

	    var csz = m[2].replace(/%20/g, " ");
	    var m2 = csz.match(/(.*?)\s+([a-z]+)\s+([-\d]+)$/i);
	    if (m2) {
		var city = m2[1];
		var state = m2[2];
		var zip = m2[3];
	    } else {
		var city = csz;
	    }

	    var address = 
		<Address>
		    <Street>{address}</Street>
		    <City>{city}</City>
		    <State>{state}</State>
		    <Zip>{zip}</Zip>
		    <Country>{country}</Country>
		</Address>;
	    stock.node += address;
	}

	var firstPara = td.p[0].toString();
	firstpara = firstPara.replace(/&lt;/, "<");
	firstpara = firstPara.replace(/&gt;/, ">");

	var lines = firstPara.split(/\s*(<p>|<br\s*\/>)\s*/i);
	for (var i=0; i<lines.length; i++) {
	    var colonMatch = lines[i].match(/^([^:]+)\s*:(?!\/)\s*(.*?)\s*$/);
	    if (colonMatch) {
		var property = colonMatch[1].replace(/\s/, "");
		var value = colonMatch[2];

		var aMatch = value.match(/<a\b[^>]+>\s*([^<]+?)\s*<\/a>/i);
		if (aMatch)
		    value = aMatch[1];

		stock.node += <{property}>{value}</{property}>;
	    }
	}
    }

    function getProfileInfo() {
	// Get the Sector, Industry, Full Time Employees from Profile page
	var results = profileQuery.results;
	elements = results.*.length();
	if (elements == 0)
	    return false;

	getAddressInfo(stock, results.td);

	var executives = <Executives></Executives>

	for each (var tr in results.tr){
	    //Remove trailing colon, and strip whitespace
	    var property = tr.td[0].p.text()
		.toString().slice(0, -1)
		.replace(/\s+/g, "");
	    switch (property.toLowerCase()) {
		case 'fulltimeemployees':
		    //Strip commas
		    value = tr.td[1].*.text().toString().replace(/,/g, "");
		    break;
		case 'sector':
		case 'industry':
		    //Convert whitespace to single space
		    value = tr.td[1].*.text().toString().replace(/\s+/g, " ");
		    break;
	        default:
 		    if (property.match(/^,/))
			getExecutive(executives, tr);
		    continue;
		    break;
	    }
	    stock.appendChild(<{property}>{value}</{property}>);
	}
	if (executives.length() > 0)
	    stock.appendChild(executives);

	return true;
    }

    function getComponentsInfo(){
        var results = componentsQuery.results;
        if( !results){
            y.log("getComponentsInfo - no results");
            return false;
        }
	    var indexes = <Indexes></Indexes>
	    var i, len = results.td.length();
	    
	    for( i=0 ; i<len ; i+=4 ){
	       var a = results.td[i].*.a ;
	       var symbol = a.text();
	       var desc = results.td[i+1].*.text()
	       indexes.node += <Index symbol={symbol}>{desc}</Index>;
	    }
	    //y.log("getComponentsInfo = " + results.td.length());
/*	    for each (var td in results.td) {
		    var iSymbol = a.@href.match(/=([^&]+)/)[1];
		    iSymbol = iSymbol.replace(/%5E/gi, "^");
		    indexes.node += <Index symbol={iSymbol}>{a.text()}</Index>;
	    }*/
        stock.appendChild(indexes);
    }    
    
    // Queue the queries
    var url = "http://finance.yahoo.com/q/pr?s="+symbol;
    var profileQuery = y.query(
	"select * from html " +
	"where url=@url and " + 
	"xpath='" +
        "//td[@class=\"yfnc_modtitlew2\"] | " +
        "//table[@class=\"yfnc_datamodoutline1\"]/tr/td/table/tr" +
        "'",
	{url:url});

    var url = "http://finance.yahoo.com/q/ct?s=" + symbol + "+Components"
    var componentsQuery = y.query(
	"select * from html " +
	"where url=@url and " + 
	"xpath='" +
        "//table[@class=\"yfnc_tableout1\"]//td[@class=\"yfnc_tabledata1\"]" +
        "'",
	{url:url});

    var url = "http://finance.yahoo.com/q?s="+symbol;
    var quoteQuery = y.query(
	"select * from html " +
	"where url=@url and " +
	"xpath='" +
	"//div[@id=\"yfi_investing_head\"]/h1 | " +
	"//div[@class=\"yfi_quote_summary\"]/div[1]'" ,
	{url:url});

    var url = "http://finance.yahoo.com/q/hp?s="+symbol;
    var historicalQuery = y.query(
	"select * from html " +
	"where url=@url and " + 
	"xpath='" +
	"//option[@selected=\"selected\"] | " + 
	"//input[@maxlength=\"2\"] | " +
	"//input[@maxlength=\"4\"]'",
	{url:url});

    var stock = <stock symbol={symbol}></stock>;

    getQuoteInfo();
    getHistoricalPrice();
    getProfileInfo();
    getComponentsInfo();
        
    response.object = stock

]]></execute>
    </select>
  </bindings>
</table>

